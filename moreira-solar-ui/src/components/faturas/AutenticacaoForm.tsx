import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { InputOTP, InputOTPGroup, InputOTPSlot } from "@/components/ui/input-otp";
import { Loader2, CheckCircle2, AlertCircle } from "lucide-react";
import { toast } from "sonner";
import { useTitularesEnergia, TipoConcessionaria } from "@/hooks/useTitularesEnergia";
import { useUnidadesConsumidoras } from "@/hooks/useUnidadesConsumidoras";
import { validarCPFCNPJ, formatarCPFCNPJ, validarEmail } from "@/lib/validators";

type Step = "dados" | "codigo" | "selecao";

interface UnidadeMock {
  numero: string;
  endereco: string;
}

export function AutenticacaoForm() {
  const { addTitular } = useTitularesEnergia();
  const { addUnidade } = useUnidadesConsumidoras();
  const [step, setStep] = useState<Step>("dados");
  const [loading, setLoading] = useState(false);
  
  // Step 1: Dados
  const [cpfCnpj, setCpfCnpj] = useState("");
  const [telefone, setTelefone] = useState("");
  const [email, setEmail] = useState("");
  const [concessionaria, setConcessionaria] = useState<TipoConcessionaria>("energisa");
  
  // Step 2: Código
  const [codigo, setCodigo] = useState("");
  
  // Step 3: Seleção
  const [unidadesMock, setUnidadesMock] = useState<UnidadeMock[]>([]);
  const [unidadeSelecionada, setUnidadeSelecionada] = useState("");

  const handleSolicitarCodigo = async () => {
    if (!cpfCnpj || !telefone || !email) {
      toast.error("Preencha todos os campos");
      return;
    }
    
    if (!validarCPFCNPJ(cpfCnpj)) {
      toast.error("CPF/CNPJ inválido");
      return;
    }
    
    if (!validarEmail(email)) {
      toast.error("E-mail inválido");
      return;
    }
    
    setLoading(true);
    
    // Simula requisição
    await new Promise((resolve) => setTimeout(resolve, 2000));
    
    setLoading(false);
    setStep("codigo");
    toast.success("Código enviado para seu telefone!");
  };

  const handleVerificarCodigo = async () => {
    if (codigo.length !== 6) {
      toast.error("Insira o código completo");
      return;
    }
    
    setLoading(true);
    
    // Simula verificação
    await new Promise((resolve) => setTimeout(resolve, 2000));
    
    // Gera UCs mockadas
    const ucsMock: UnidadeMock[] = [
      { numero: "123456789", endereco: "Rua Exemplo, 123" },
      { numero: "987654321", endereco: "Av. Teste, 456" },
    ];
    
    setUnidadesMock(ucsMock);
    setLoading(false);
    setStep("selecao");
    toast.success("Código verificado! Selecione a unidade.");
  };

  const handleConfirmar = async () => {
    if (!unidadeSelecionada) {
      toast.error("Selecione uma unidade consumidora");
      return;
    }
    
    setLoading(true);
    
    // Simula busca de dados
    await new Promise((resolve) => setTimeout(resolve, 2000));
    
    // Cria Titular (Supabase mutation - note: ID will be generated by Supabase)
    addTitular({
      nome: cpfCnpj.length > 14 ? "Empresa Exemplo LTDA" : "João da Silva",
      cpf_cnpj: cpfCnpj.replace(/\D/g, ""),
      telefone,
      email,
      concessionaria,
    });

    // Note: In real implementation, we'd need the titularId from the mutation result
    // For now, this is a mock flow - the actual implementation would need to be async
    // TODO: Update to properly handle async titular creation and get the ID back

    // Cria UC (apenas a selecionada inicialmente)
    const ucMock = unidadesMock.find((u) => u.numero === unidadeSelecionada)!;
    addUnidade({
      titular_id: "", // TODO: Get from titular creation above
      numero_instalacao: ucMock.numero,
      apelido: undefined,
      endereco: ucMock.endereco,
      cidade: "São Paulo",
      estado: "SP",
      concessionaria,
      tipo: "convencional",
      status: "ativa",
      clienteId: undefined,
      faturamentoMedioKwh: 350,
      valorMedioFatura: 450,
      ultimaFatura: undefined,
      faturas: [],
      gerarRelatorioAutomatico: false,
    });
    
    setLoading(false);
    toast.success("Autenticação concluída! Titular e unidade cadastrados.");
    
    // Reset form
    setCpfCnpj("");
    setTelefone("");
    setEmail("");
    setCodigo("");
    setUnidadeSelecionada("");
    setUnidadesMock([]);
    setStep("dados");
  };

  return (
    <Card className="max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle>Autenticação na Concessionária</CardTitle>
        <CardDescription>
          {step === "dados" && "Passo 1 de 3: Informe seus dados de acesso"}
          {step === "codigo" && "Passo 2 de 3: Digite o código recebido"}
          {step === "selecao" && "Passo 3 de 3: Selecione a unidade consumidora"}
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Step 1: Dados */}
        {step === "dados" && (
          <>
            <div className="space-y-2">
              <Label>CPF/CNPJ *</Label>
              <Input
                placeholder="000.000.000-00"
                value={cpfCnpj}
                onChange={(e) => setCpfCnpj(e.target.value)}
                maxLength={18}
              />
            </div>
            
            <div className="space-y-2">
              <Label>Telefone *</Label>
              <Input
                placeholder="(00) 00000-0000"
                value={telefone}
                onChange={(e) => setTelefone(e.target.value)}
                maxLength={15}
              />
            </div>
            
            <div className="space-y-2">
              <Label>E-mail *</Label>
              <Input
                type="email"
                placeholder="seuemail@exemplo.com"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>
            
            <div className="space-y-2">
              <Label>Concessionária *</Label>
              <Select value={concessionaria} onValueChange={(v) => setConcessionaria(v as TipoConcessionaria)}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="energisa">Energisa</SelectItem>
                  <SelectItem value="cemig">CEMIG</SelectItem>
                  <SelectItem value="copel">Copel</SelectItem>
                  <SelectItem value="celpe">Celpe</SelectItem>
                  <SelectItem value="outras">Outras</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <Button onClick={handleSolicitarCodigo} disabled={loading} className="w-full">
              {loading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Solicitando...
                </>
              ) : (
                "Solicitar Código"
              )}
            </Button>
          </>
        )}
        
        {/* Step 2: Código */}
        {step === "codigo" && (
          <>
            <div className="flex items-center gap-2 p-4 bg-green-50 dark:bg-green-950 rounded-lg border border-green-200 dark:border-green-800">
              <CheckCircle2 className="h-5 w-5 text-green-600" />
              <span className="text-sm text-green-800 dark:text-green-200">
                Código enviado para {telefone}
              </span>
            </div>
            
            <div className="space-y-2">
              <Label>Código de Verificação (6 dígitos)</Label>
              <div className="flex justify-center">
                <InputOTP maxLength={6} value={codigo} onChange={setCodigo}>
                  <InputOTPGroup>
                    <InputOTPSlot index={0} />
                    <InputOTPSlot index={1} />
                    <InputOTPSlot index={2} />
                    <InputOTPSlot index={3} />
                    <InputOTPSlot index={4} />
                    <InputOTPSlot index={5} />
                  </InputOTPGroup>
                </InputOTP>
              </div>
              <p className="text-xs text-muted-foreground text-center">
                Para teste, use qualquer código de 6 dígitos
              </p>
            </div>
            
            <div className="flex gap-2">
              <Button variant="outline" onClick={() => setStep("dados")} className="flex-1">
                Voltar
              </Button>
              <Button onClick={handleVerificarCodigo} disabled={loading} className="flex-1">
                {loading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Verificando...
                  </>
                ) : (
                  "Verificar Código"
                )}
              </Button>
            </div>
          </>
        )}
        
        {/* Step 3: Seleção */}
        {step === "selecao" && (
          <>
            <div className="flex items-center gap-2 p-4 bg-blue-50 dark:bg-blue-950 rounded-lg border border-blue-200 dark:border-blue-800">
              <AlertCircle className="h-5 w-5 text-blue-600" />
              <span className="text-sm text-blue-800 dark:text-blue-200">
                {unidadesMock.length} unidade(s) encontrada(s)
              </span>
            </div>
            
            <div className="space-y-2">
              <Label>Selecionar Unidade Consumidora *</Label>
              <Select value={unidadeSelecionada} onValueChange={setUnidadeSelecionada}>
                <SelectTrigger>
                  <SelectValue placeholder="Escolha uma unidade..." />
                </SelectTrigger>
                <SelectContent>
                  {unidadesMock.map((uc) => (
                    <SelectItem key={uc.numero} value={uc.numero}>
                      {uc.numero} - {uc.endereco}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="flex gap-2">
              <Button variant="outline" onClick={() => setStep("codigo")} className="flex-1">
                Voltar
              </Button>
              <Button onClick={handleConfirmar} disabled={loading} className="flex-1">
                {loading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Processando...
                  </>
                ) : (
                  "Confirmar e Buscar Unidades"
                )}
              </Button>
            </div>
          </>
        )}
      </CardContent>
    </Card>
  );
}
